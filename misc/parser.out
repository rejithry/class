Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> exp
Rule 1     exp -> NUMBER
Rule 2     exp -> LPAREN NUMBER RPAREN
Rule 3     exp -> LBRACKET exp RBRACKET
Rule 4     exp -> LBRACKET exp COMMA exp RBRACKET
Rule 5     exp -> LPAREN exp COMMA exp RPAREN
Rule 6     exp -> exp COMMA exp

Terminals, with rules where they appear

COMMA                : 4 5 6
LBRACKET             : 3 4
LPAREN               : 2 5
NUMBER               : 1 2
RBRACKET             : 3 4
RPAREN               : 2 5
error                : 

Nonterminals, with rules where they appear

exp                  : 3 4 4 5 5 6 6 0

Parsing method: LALR

state 0

    (0) S' -> . exp
    (1) exp -> . NUMBER
    (2) exp -> . LPAREN NUMBER RPAREN
    (3) exp -> . LBRACKET exp RBRACKET
    (4) exp -> . LBRACKET exp COMMA exp RBRACKET
    (5) exp -> . LPAREN exp COMMA exp RPAREN
    (6) exp -> . exp COMMA exp

    NUMBER          shift and go to state 2
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 3

    exp                            shift and go to state 1

state 1

    (0) S' -> exp .
    (6) exp -> exp . COMMA exp

    COMMA           shift and go to state 5


state 2

    (1) exp -> NUMBER .

    RPAREN          reduce using rule 1 (exp -> NUMBER .)
    COMMA           reduce using rule 1 (exp -> NUMBER .)
    $end            reduce using rule 1 (exp -> NUMBER .)
    RBRACKET        reduce using rule 1 (exp -> NUMBER .)


state 3

    (3) exp -> LBRACKET . exp RBRACKET
    (4) exp -> LBRACKET . exp COMMA exp RBRACKET
    (1) exp -> . NUMBER
    (2) exp -> . LPAREN NUMBER RPAREN
    (3) exp -> . LBRACKET exp RBRACKET
    (4) exp -> . LBRACKET exp COMMA exp RBRACKET
    (5) exp -> . LPAREN exp COMMA exp RPAREN
    (6) exp -> . exp COMMA exp

    NUMBER          shift and go to state 2
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 3

    exp                            shift and go to state 6

state 4

    (2) exp -> LPAREN . NUMBER RPAREN
    (5) exp -> LPAREN . exp COMMA exp RPAREN
    (1) exp -> . NUMBER
    (2) exp -> . LPAREN NUMBER RPAREN
    (3) exp -> . LBRACKET exp RBRACKET
    (4) exp -> . LBRACKET exp COMMA exp RBRACKET
    (5) exp -> . LPAREN exp COMMA exp RPAREN
    (6) exp -> . exp COMMA exp

    NUMBER          shift and go to state 7
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 3

    exp                            shift and go to state 8

state 5

    (6) exp -> exp COMMA . exp
    (1) exp -> . NUMBER
    (2) exp -> . LPAREN NUMBER RPAREN
    (3) exp -> . LBRACKET exp RBRACKET
    (4) exp -> . LBRACKET exp COMMA exp RBRACKET
    (5) exp -> . LPAREN exp COMMA exp RPAREN
    (6) exp -> . exp COMMA exp

    NUMBER          shift and go to state 2
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 3

    exp                            shift and go to state 9

state 6

    (3) exp -> LBRACKET exp . RBRACKET
    (4) exp -> LBRACKET exp . COMMA exp RBRACKET
    (6) exp -> exp . COMMA exp

    RBRACKET        shift and go to state 10
    COMMA           shift and go to state 11


state 7

    (2) exp -> LPAREN NUMBER . RPAREN
    (1) exp -> NUMBER .

    RPAREN          shift and go to state 12
    COMMA           reduce using rule 1 (exp -> NUMBER .)


state 8

    (5) exp -> LPAREN exp . COMMA exp RPAREN
    (6) exp -> exp . COMMA exp

    COMMA           shift and go to state 13


state 9

    (6) exp -> exp COMMA exp .
    (6) exp -> exp . COMMA exp

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 6 (exp -> exp COMMA exp .)
    $end            reduce using rule 6 (exp -> exp COMMA exp .)
    RBRACKET        reduce using rule 6 (exp -> exp COMMA exp .)
    COMMA           shift and go to state 5

  ! COMMA           [ reduce using rule 6 (exp -> exp COMMA exp .) ]


state 10

    (3) exp -> LBRACKET exp RBRACKET .

    RPAREN          reduce using rule 3 (exp -> LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 3 (exp -> LBRACKET exp RBRACKET .)
    $end            reduce using rule 3 (exp -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 3 (exp -> LBRACKET exp RBRACKET .)


state 11

    (4) exp -> LBRACKET exp COMMA . exp RBRACKET
    (6) exp -> exp COMMA . exp
    (1) exp -> . NUMBER
    (2) exp -> . LPAREN NUMBER RPAREN
    (3) exp -> . LBRACKET exp RBRACKET
    (4) exp -> . LBRACKET exp COMMA exp RBRACKET
    (5) exp -> . LPAREN exp COMMA exp RPAREN
    (6) exp -> . exp COMMA exp

    NUMBER          shift and go to state 2
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 3

    exp                            shift and go to state 14

state 12

    (2) exp -> LPAREN NUMBER RPAREN .

    RPAREN          reduce using rule 2 (exp -> LPAREN NUMBER RPAREN .)
    COMMA           reduce using rule 2 (exp -> LPAREN NUMBER RPAREN .)
    $end            reduce using rule 2 (exp -> LPAREN NUMBER RPAREN .)
    RBRACKET        reduce using rule 2 (exp -> LPAREN NUMBER RPAREN .)


state 13

    (5) exp -> LPAREN exp COMMA . exp RPAREN
    (6) exp -> exp COMMA . exp
    (1) exp -> . NUMBER
    (2) exp -> . LPAREN NUMBER RPAREN
    (3) exp -> . LBRACKET exp RBRACKET
    (4) exp -> . LBRACKET exp COMMA exp RBRACKET
    (5) exp -> . LPAREN exp COMMA exp RPAREN
    (6) exp -> . exp COMMA exp

    NUMBER          shift and go to state 2
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 3

    exp                            shift and go to state 15

state 14

    (4) exp -> LBRACKET exp COMMA exp . RBRACKET
    (6) exp -> exp COMMA exp .
    (6) exp -> exp . COMMA exp

  ! shift/reduce conflict for RBRACKET resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RBRACKET        shift and go to state 16
    COMMA           shift and go to state 5

  ! RBRACKET        [ reduce using rule 6 (exp -> exp COMMA exp .) ]
  ! COMMA           [ reduce using rule 6 (exp -> exp COMMA exp .) ]


state 15

    (5) exp -> LPAREN exp COMMA exp . RPAREN
    (6) exp -> exp COMMA exp .
    (6) exp -> exp . COMMA exp

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          shift and go to state 17
    COMMA           shift and go to state 5

  ! COMMA           [ reduce using rule 6 (exp -> exp COMMA exp .) ]


state 16

    (4) exp -> LBRACKET exp COMMA exp RBRACKET .

    RPAREN          reduce using rule 4 (exp -> LBRACKET exp COMMA exp RBRACKET .)
    COMMA           reduce using rule 4 (exp -> LBRACKET exp COMMA exp RBRACKET .)
    $end            reduce using rule 4 (exp -> LBRACKET exp COMMA exp RBRACKET .)
    RBRACKET        reduce using rule 4 (exp -> LBRACKET exp COMMA exp RBRACKET .)


state 17

    (5) exp -> LPAREN exp COMMA exp RPAREN .

    RPAREN          reduce using rule 5 (exp -> LPAREN exp COMMA exp RPAREN .)
    COMMA           reduce using rule 5 (exp -> LPAREN exp COMMA exp RPAREN .)
    $end            reduce using rule 5 (exp -> LPAREN exp COMMA exp RPAREN .)
    RBRACKET        reduce using rule 5 (exp -> LPAREN exp COMMA exp RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 9 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 14 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 14 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 15 resolved as shift
